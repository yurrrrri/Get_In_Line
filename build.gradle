plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'nu.studer.jooq' version '8.2'
}

group = 'com.fastcampus'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    runtimeOnly 'com.h2database:h2'
//    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    runtimeOnly 'org.postgresql:postgresql'

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

    // Querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Jooq
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    jooqGenerator 'org.postgresql:postgresql:42.5.1'
}

tasks.named('test') {
    useJUnitPlatform()
}

def generated = 'src/main/generated'

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

sourceSets {
    main.java.srcDirs += [ generated ]
}

clean {
    delete file(generated)
}

jooq {
    version = '3.18.4'

    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = 'jdbc:postgresql://localhost:5432/getinline'
                    user = 'postgres'
                    password = ''
                }
                generator {
                    name = 'org.jooq.codegen.JavaGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'getinline'
                        includes = '.*'
                        excludes = ''
                        forcedTypes {
                            forcedType {
                                userType = 'com.fastcampus.corona.constant.EventStatus'
                                enumConverter = true
                                includeExpression = '.*\\.event_status'
                                includeTypes = '.*'
                            }
                            forcedType {
                                userType = 'com.fastcampus.corona.constant.PlaceType'
                                enumConverter = true
                                includeExpression = '.*\\.place_type'
                                includeTypes = '.*'
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                        javaTimeTypes = true
                    }
                    target {
                        packageName = 'com.fastcampus.corona'
                        directory = 'src/main/generated-jooq'
                    }
                    strategy.name = "org.jooq.codegen.DefaultGeneratorStrategy"
                }
            }
        }
    }
}

tasks.named('generateJooq').configure {
    allInputsDeclared = true
    outputs.cacheIf { true }
}